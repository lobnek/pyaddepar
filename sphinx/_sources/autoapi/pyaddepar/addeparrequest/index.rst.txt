pyaddepar.addeparrequest
========================

.. py:module:: pyaddepar.addeparrequest


Classes
-------

.. autoapisummary::

   pyaddepar.addeparrequest.OutputType
   pyaddepar.addeparrequest.PortfolioType
   pyaddepar.addeparrequest.AttrDict
   pyaddepar.addeparrequest.AddeparRequest


Module Contents
---------------

.. py:class:: OutputType(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access::

   >>> Color.RED
   <Color.RED: 1>

   - value lookup:

   >>> Color(1)
   <Color.RED: 1>

   - name lookup:

   >>> Color['RED']
   <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: CSV
      :value: 'csv'



   .. py:attribute:: JSON
      :value: 'json'



   .. py:attribute:: TSV
      :value: 'tsv'



   .. py:attribute:: XLSX
      :value: 'xlsx'



.. py:class:: PortfolioType(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access::

   >>> Color.RED
   <Color.RED: 1>

   - value lookup:

   >>> Color(1)
   <Color.RED: 1>

   - name lookup:

   >>> Color['RED']
   <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: GROUP
      :value: 'group'



   .. py:attribute:: FIRM
      :value: 'firm'



   .. py:attribute:: ENTITY
      :value: 'entity'



.. py:class:: AttrDict(*args, **kwargs)

   Bases: :py:obj:`dict`


   dict() -> new empty dictionary
   dict(mapping) -> new dictionary initialized from a mapping object's
       (key, value) pairs
   dict(iterable) -> new dictionary initialized as if via:
       d = {}
       for k, v in iterable:
           d[k] = v
   dict(**kwargs) -> new dictionary initialized with the name=value pairs
       in the keyword argument list.  For example:  dict(one=1, two=2)


.. py:class:: AddeparRequest(key=None, secret=None, id=None, company=None, logger=None)

   Bases: :py:obj:`object`


   .. py:property:: auth


   .. py:property:: headers


   .. py:method:: dicturl(d)
      :staticmethod:



   .. py:method:: get(request)


   .. py:method:: post(data, request='entities')


   .. py:method:: delete(entity)


   .. py:property:: version


   .. py:method:: view_csv(view_id, portfolio_id, portfolio_type, start_date=pd.Timestamp('today'), end_date=pd.Timestamp('today'))


   .. py:method:: transaction_csv(view_id, portfolio_id, portfolio_type, start_date=pd.Timestamp('today'), end_date=pd.Timestamp('today'))


   .. py:method:: entities(link='/v1/entities', modeltype=None)


   .. py:property:: users


   .. py:property:: groups


   .. py:method:: group(id)


   .. py:method:: user(id)


   .. py:method:: entity(id)


   .. py:method:: members(id)


   .. py:property:: persons


   .. py:property:: options


